<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
    날짜 : 2023/03/08
    이름 : 이원정
    내용 : 관리자 mapper
 -->
<mapper namespace="kr.co.Lemo.dao.AdminDAO">

    <!-- 관리자 - 회원 목록 -->
    <select id="selectUser" parameterType="kr.co.Lemo.utils.SearchCondition" resultType="kr.co.Lemo.domain.UserVO">
        select * from `lemo_member_userinfo`
        where 1=1
        <include refid="searchLevel"/>
        <include refid="searchType"/>
        <include refid="searchIsNoticeEnabled"/>
        <include refid="searchCondition"/>
        <if test="sort != null">
            <choose>
                <when test="sort == 'isEnabledOn'">
                    order by `isLocked` asc, `isEnabled` desc, `rdate` desc
                </when>
                <when test="sort == 'isEnabledOff'">
                   order by `isLocked` desc, `isEnabled` asc, `rdate` desc
                </when>
                <when test="sort == 'levelOn'">
                    order by `level` desc, `rdate` desc
                </when>
                <when test="sort == 'levelOff'">
                    order by `level` asc, `rdate` desc
                </when>
                <when test="sort == 'typeOn'">
                    order by `type` desc, `rdate` desc
                </when>
                <when test="sort == 'typeOff'">
                    order by `type` asc, `rdate` desc
                </when>
                <when test="sort == 'rdateOn'">
                    order by `rdate` asc
                </when>
                <when test="sort == 'rdateOff'">
                    order by `rdate` desc
                </when>
            </choose>
        </if>
        <if test="sort == null">
            order by `rdate` desc
        </if>
        limit #{offset}, 10;
    </select>

    <!-- 관리자 - 회원 목록 페이징 -->
    <select id="countUser" parameterType="kr.co.Lemo.utils.SearchCondition" resultType="java.lang.Integer">
        select count(*) from `lemo_member_userinfo`
        where 1=1
        <include refid="searchLevel"/>
        <include refid="searchType"/>
        <include refid="searchIsNoticeEnabled"/>
        <include refid="searchCondition"/>
        <!-- <include refid="orderUser"/> -->
    </select>

    <!-- 관리자 - 쿠폰 목록 -->
    <select id="selectCoupon" parameterType="kr.co.Lemo.utils.SearchCondition" resultType="kr.co.Lemo.domain.CouponVO">
        select * from `lemo_product_coupon`
        where 1=1
        <include refid="searchCouponType"/>
        <include refid="searchCouponRole"/>
        order by `cp_id` desc limit #{offset}, 10;
    </select>

    <!-- 관리자 - 쿠폰 목록 페이징  -->
    <select id="countCoupon" parameterType="kr.co.Lemo.utils.SearchCondition" resultType="java.lang.Integer">
        select count(*) from `lemo_product_coupon`
        where 1=1
        <include refid="searchCouponType"/>
        <include refid="searchCouponRole"/>
    </select>

    <!-- admin - coupon - select accommodation owned for BUSINESS search-->
    <select id="selectAccOwned" resultType="kr.co.Lemo.domain.CouponVO">
        select `acc_name` from `lemo_product_accommodation` as a
        join `lemo_product_coupon` as b on a.user_id = b.user_id
        where a.`user_id`='3min-ik@hanmail.net'
        group by `acc_name`;
    </select>

    <!-- 관리자 - 리뷰 목록  -->
    <select id="selectReview" parameterType="kr.co.Lemo.utils.SearchCondition" resultType="kr.co.Lemo.domain.ReviewVO">
        select * from `lemo_product_review` as a
        inner join `lemo_product_reservation` as b on a.res_no=b.res_no
        inner join `lemo_product_accommodation` as c on b.acc_id=c.acc_id
        where 1=1
        <include refid="searchReview"/>
        order by `revi_rdate` desc limit #{offset}, 10;
    </select>

    <!-- 관리자 - 리뷰 목록 페이징 -->
    <select id="countReview" parameterType="kr.co.Lemo.utils.SearchCondition" resultType="java.lang.Integer">
        select count(*) from `lemo_product_review` as a
        inner join `lemo_product_reservation` as b on a.res_no=b.res_no
        inner join `lemo_product_accommodation` as c on b.acc_id=c.acc_id
        where 1=1
        <include refid="searchReview"/>
    </select>

    <!-- 관리자 - 리뷰 보기  -->
    <select id="viewReview" resultType="kr.co.Lemo.domain.ReviewVO">
        select * from `lemo_product_review` as a
        inner join `lemo_product_reservation` as b on a.res_no=b.res_no
        inner join `lemo_product_accommodation` as c on b.acc_id=c.acc_id
        inner join `lemo_product_room` as d on b.room_id = d.room_id
        where `revi_id`=#{revi_id};
    </select>

    <!-- 관리자 - 객실 목록 -->
    <select id="selectRoom" parameterType="kr.co.Lemo.utils.SearchCondition" resultType="kr.co.Lemo.domain.ProductRoomVO">
        select * from `lemo_product_room` as a
        inner join `lemo_product_accommodation` as b on a.acc_id=b.acc_id
        inner join `lemo_product_ratepolicy` as c on a.acc_id=c.acc_id
        where 1=1
        <include refid="searchRoom"/>
        order by `room_id` desc limit #{offset}, 10;
    </select>

    <!-- 관리자 - 객실 목록 페이징 -->
    <select id="countRoom" parameterType="kr.co.Lemo.utils.SearchCondition" resultType="java.lang.Integer">
        select count(*) from `lemo_product_room` as a
        inner join `lemo_product_accommodation` as b on a.acc_id=b.acc_id
        inner join `lemo_product_ratepolicy` as c on a.acc_id=c.acc_id
        where 1=1
        <include refid="searchRoom"/>
    </select>

    <!-- 관리자 - 객실 보기 -->
    <select id="viewRoom" resultType="kr.co.Lemo.domain.ProductRoomVO">
        select * from `lemo_product_room` as a
        inner join `lemo_product_accommodation` as b on a.acc_id=b.acc_id
        inner join `lemo_product_ratepolicy` as c on a.acc_id=c.acc_id
        where `room_id`=#{room_id};
    </select>



    <!-- 관리자 - 쿠폰 등록  -->
    <insert id="insertCoupon">
        INSERT INTO `lemo_product_coupon` (
            `user_id`, `user_role`, `cp_subject`, `cp_group`, `cp_type`,
            `cp_rate`, `cp_disType`, `cp_price`, `cp_minimum`, `cp_maximum`,
            `cp_start`, `cp_end`, `cp_daysAvailable`, `cp_limitedIssuance`
        )
        VALUES (
            'admin@gmail.com', 'ADMIN', #{cp_subject}, #{cp_group}, #{cp_type}, #{cp_rate},
            CASE
                WHEN #{cp_rate} IS NOT NULL THEN '1'
                WHEN #{cp_price} IS NOT NULL THEN '2'
                ELSE NULL
            END,
            #{cp_price}, #{cp_minimum}, #{cp_maximum}, #{cp_start}, #{cp_end}, #{cp_daysAvailable}, #{cp_limitedIssuance}
        );
    </insert>


    <update id="updateMemo">
        update `lemo_member_userinfo` set `memo`=#{memo} where `user_id`=#{user_id};
    </update>

    <update id="updateIsLocked">
        update `lemo_member_userinfo` set `isLocked`=0 where `user_id`=#{user_id};
    </update>

    <update id="updateIsLockedClear">
        update `lemo_member_userinfo` set `isLocked`=1 where `user_id`=#{user_id};
    </update>

    <!-- admin - review - reply -->
    <update id="updateReply">
        update `lemo_product_review` set `revi_reply`=#{revi_reply} where `revi_id`=#{revi_id};
    </update>

    <!-- 관리자 - 쿠폰 삭제 -->
    <delete id="deleteCoupon">
        delete from `lemo_product_coupon` where `cp_id`=#{cp_id};
    </delete>

    <!-- admin - review - delete review -->
    <delete id="deleteReview">
        delete from `lemo_product_review` where `revi_id`=#{revi_id};
    </delete>


    <!-- 공통 키 -->
    <sql id="sortRdate">

    </sql>

    <!-- 회원검색  -->
    <!-- 검색어 입력 (회원아이디/회원닉네임) -->
    <sql id="searchCondition">
        <if test="searchField != null">
            <choose>
                <when test='searchField == "userId"'>
                   and `user_id` like CONCAT('%', #{searchWord}, '%')
                </when>
                <when test='searchField == "userNick"'>
                   and `nick` like CONCAT('%', #{searchWord}, '%')
                </when>
            </choose>
        </if>
    </sql>

    <!-- 계정활성화여부 (정상/탈퇴) -->
    <sql id="searchIsEnabled">
        <if test="searchIsEnabled != null">
            <choose>
                <when test="searchIsEnabled == 1">
                    and `isEnabled`=1
                </when>
                <when test="searchIsEnabled == 0">
                    and `isEnabled`=0
                </when>
            </choose>
        </if>
    </sql>

    <!-- 알림동의여부 -->
    <sql id="searchIsNoticeEnabled">
        <if test="searchIsNoticeEnabled != null">
            <choose>
                <when test="searchIsNoticeEnabled == 1">
                    and `isNoticeEnabled`=1
                </when>
                <when test="searchIsNoticeEnabled == 0">
                    and `isNoticeEnabled`=0
                </when>
            </choose>
        </if>
    </sql>

    <!-- 회회원등급 (일반/엘리트) -->
    <sql id="searchLevel">
        <if test="searchLevel != null">
            <choose>
                <when test="searchLevel == 1">
                    and `level`=1
                </when>
                <when test="searchLevel == 2">
                    and `level`=2
                </when>
            </choose>
        </if>
    </sql>

    <!-- 회원구분 (일반/판매자) -->
    <sql id="searchType">
        <if test="searchType != null">
            <choose>
                <when test="searchType == 1">
                    and `role`='USER'
                </when>
                <when test="searchType == 2">
                    and `role`='BUSINESS'
                </when>
            </choose>
        </if>
    </sql>

    <!-- 회원 구분 (정렬) -->
    <sql id="orderUser">
        <if test="sort !=null">
            <choose>
                <when test="sort == 'isEnabledOn'">
                    ORDER BY `isLocked` ASC, `isEnabled` DESC, `rdate` DESC
                </when>
                <when test="sort == 'isEnabledOff'">
                    ORDER BY `isLocked` DESC, `isEnabled` ASC, `rdate` DESC
                </when>
            </choose>
        </if>
        <if test="sort == null">
            ORDER BY `rdate` DESC
        </if>
    </sql>

    <sql id="orderLevel">
        <if test="sortLevel !=null">
            <choose>
                <when test="sortLevel == 'levelOn'">
                    ORDER BY `level` DESC, `rdate` DESC
                </when>
                <when test="sortLevel == 'levelOff'">
                    ORDER BY `level` ASC, `rdate` DESC
                </when>
            </choose>
        </if>
        <if test="sortLevel == null">
            ORDER BY `rdate` DESC
        </if>
    </sql>

    <sql id="orderType">
        <if test="sortType !=null">
            <choose>
                <when test="sort == 'typeOn'">
                    ORDER BY `type` DESC, `rdate` DESC
                </when>
                <when test="sort == 'typeOff'">
                    ORDER BY `type` ASC, `rdate` DESC
                </when>
            </choose>
        </if>
        <if test="sort == null">
            ORDER BY `rdate` DESC
        </if>
    </sql>

    <sql id="orderRdate">
       <if test="sortRdate !=null">
           <choose>
               <when test="sort == 'rdateOn'">
                   ORDER BY `rdate` DESC
               </when>
               <when test="sort == 'rdateOff'">
                   ORDER BY `rdate` ASC
               </when>
           </choose>
       </if>
       <if test="sort == null">
           ORDER BY `rdate` DESC
       </if>
   </sql>



    <!-- 쿠폰 검색 -->
    <sql id="searchCouponType">
        <if test="searchField != null">
            <choose>
                <when test='searchField == "acc_id"'>
                    and `acc_id` like CONCAT('%', #{searchWord}, '%')
                </when>
                <when test='searchField == "cp_subject"'>
                    and `cp_subject` like CONCAT('%', #{searchWord}, '%')
                </when>
                <when test='searchField == "user_id"'>
                    and a.`user_id` like CONCAT('%', #{searchWord}, '%')
                </when>
            </choose>
        </if>
    </sql>

    <sql id="searchCouponRole">
        <if test="searchCouponRole != null">
            <choose>
                <when test='searchCouponRole == "ADMIN"'>
                    and `user_role`='ADMIN'
                </when>
                <when test='searchCouponRole == "BUSINESS"'>
                    and `user_role`='BUSINESS'
                </when>
            </choose>
        </if>
    </sql>

    <!-- 리뷰 검색 -->
    <sql id="searchReview">
        <if test="searchField != null">
            <choose>
                <when test="searchField == 'acc_id'">
                    and b.`acc_id` like CONCAT ('%', #{searchWord}, '%')
                </when>
                <when test="searchField == 'acc_name'">
                    and `acc_name` like CONCAT ('%', #{searchWord}, '%')
                </when>
                <when test="searchField == 'user_id'">
                    and c.`user_id` like CONCAT ('%', #{searchWord}, '%')
                </when>
            </choose>
        </if>
    </sql>

    <!-- 객실 검색 -->
    <sql id="searchRoom">
        <if test="searchField != null">
            <choose>
                <when test='searchField == "acc_id"'>
                   and `acc_id` like CONCAT('%', #{searchWord}, '%')
                </when>
                <when test='searchField == "acc_name"'>
                   and `acc_name` like CONCAT('%', #{searchWord}, '%')
                </when>
                <when test='searchField == "room_id"'>
                   and `room_id` like CONCAT('%', #{searchWord}, '%')
                </when>
                <when test='searchField == "room_name"'>
                   and `room_name` like CONCAT('%', #{searchWord}, '%')
                </when>
            </choose>
        </if>
    </sql>


</mapper>